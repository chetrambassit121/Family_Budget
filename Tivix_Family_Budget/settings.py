"""
Django settings for Tivix_Family_Budget project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os 
import django_on_heroku
import dj_database_url  
from django.contrib.messages import constants as messages
from django.contrib import messages
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/
SECRET_KEY = str(os.getenv("SECRET_KEY"))
DEBUG = True
ALLOWED_HOSTS = ["*"] 

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # CREATED APPS 
    'family_budget',
    'users',
    # 'pytest',
    # REST API APPS
    "rest_framework",
    "knox",
    'djoser',
    'rest_framework.authtoken',
    # 'django_nose'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware'
]

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-secondary',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

# # Use nose to run all tests
# TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'

# # Tell nose to measure coverage on the 'foo' and 'bar' apps
# NOSE_ARGS = [
#     '--with-coverage',
#     '--cover-package=users,family_budget',
# ]

ROOT_URLCONF = 'Tivix_Family_Budget.urls'

# # Use nose to run all tests
# TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'

# # Tell nose to measure coverage on the 'foo' and 'bar' apps
# NOSE_ARGS = [
#     '--with-coverage',
#     '--cover-package=foo,bar',
# ]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Tivix_Family_Budget.wsgi.application'

AUTH_USER_MODEL = "users.User" 

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.environ.get('POSTGRES_NAME'),
#         'USER': os.environ.get('POSTGRES_USER'),
#         'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
#         'HOST': 'db',
#         'PORT': 5432,
#     }
# }

db_from_env = dj_database_url.config(
    conn_max_age=500
)  
DATABASES["default"].update(
    db_from_env
)


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# STATIC_URL = "/static/"  
# STATICFILES_DIRS = [  
#     os.path.join(
#         BASE_DIR, "static"
#     ),  
# ]

STATIC_URL = "/static/"  
STATICFILES_DIRS = [  
    os.path.join(
        BASE_DIR, "static"
    ),  
]
STATIC_ROOT = os.path.join(
    BASE_DIR, "staticfiles"
)  
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage" 

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'






# EMAIL_BACKEND = str(os.getenv("EMAIL_BACKEND"))
# EMAIL_USE_TLS = str(os.getenv("EMAIL_USE_TLS"))
# EMAIL_HOST = str(os.getenv("EMAIL_HOST"))
# EMAIL_HOST_USER = str(os.getenv("EMAIL_HOST_USER"))
# DEFAULT_FROM_EMAIL = str(os.getenv("DEFAULT_FROM_EMAIL"))
# EMAIL_HOST_PASSWORD = str(os.getenv("EMAIL_HOST_PASSWORD"))
# EMAIL_PORT = str(os.getenv("EMAIL_PORT"))


EMAIL_BACKEND=os.getenv("EMAIL_BACKEND")
EMAIL_USE_TLS=os.getenv("EMAIL_USE_TLS")
EMAIL_HOST=os.getenv("EMAIL_HOST")
EMAIL_HOST_USER=os.getenv("EMAIL_HOST_USER")
DEFAULT_FROM_EMAIL=os.getenv("DEFAULT_FROM_EMAIL")
EMAIL_HOST_PASSWORD=os.getenv("EMAIL_HOST_PASSWORD")
EMAIL_PORT=os.getenv("EMAIL_PORT")


# EMAIL_BACKEND='django.core.mail.backends.smtp.EmailBackend'
# EMAIL_USE_TLS=True
# EMAIL_HOST=str(os.getenv("EMAIL_HOST"))
# EMAIL_HOST_USER=str(os.getenv("EMAIL_HOST_USER"))
# DEFAULT_FROM_EMAIL=str(os.getenv("DEFAULT_FROM_EMAIL"))
# EMAIL_HOST_PASSWORD=str(os.getenv("EMAIL_HOST_PASSWORD"))
# EMAIL_PORT=str(os.getenv("EMAIL_PORT"))


# EMAIL_BACKEND='django.core.mail.backends.smtp.EmailBackend'
# EMAIL_USE_TLS=True
# EMAIL_HOST=str(os.getenv("EMAIL_HOST"))
# EMAIL_HOST_USER=str(os.getenv("EMAIL_HOST_USER"))
# DEFAULT_FROM_EMAIL=str(os.getenv("DEFAULT_FROM_EMAIL"))
# EMAIL_HOST_PASSWORD=str(os.getenv("EMAIL_HOST_PASSWORD"))
# EMAIL_PORT=str(os.getenv("EMAIL_PORT"))

# DEFAULT_FROM_EMAIL=os.environ.get('DEFAULT_FROM_EMAIL')
# DEFAULT_FROM_EMAIL='django.core.mail.backends.smtp.EmailBackend'
# EMAIL_BACKEND=os.environ.get('EMAIL_BACKEND')

# EMAIL_HOST=os.environ.get('EMAIL_HOST')
# EMAIL_HOST_USER=os.environ.get('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD=os.environ.get('EMAIL_HOST_PASSWORD')
# EMAIL_USE_TLS=os.environ.get('EMAIL_USE_TLS')
# EMAIL_PORT=os.environ.get('EMAIL_PORT')


LOGIN_URL='login'
LOGIN_REDIRECT_URL='home'
LOGOUT_URL='logout'
LOGOUT_REDIRECT_URL='home'



REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
    # 'DEFAULT_PARSER_CLASSES': [
    #     'rest_framework.parsers.JSONParser',
    # ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # "rest_framework.authentication.SessionAuthentication",
        # 'rest_framework.authentication.TokenAuthentication', 
        # 'rest_framework.authentication.BasicAuthentication'
        "knox.auth.TokenAuthentication"
    ],
    "DEFAULT_PERMISSIONS_CLASSES": [
        # 'rest_framework.permissions.AllowAny',
        "rest_framework.permissions.IsAuthenticated",
    ],
}

'''required for django heroku'''
django_on_heroku.settings(locals())  